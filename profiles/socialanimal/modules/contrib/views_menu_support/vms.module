<?php

/**
 * @file
 * Render an administrative menu as a dropdown menu at the top of the window.
 */

// Special responses to mlid queries.
define('VMS_FRONT_PAGE',    -1);
define('VMS_MLID_MISSING',  -2);
define('VMS_BAD_CONFIG',    -3);

/**
 * Array describing different mlid queries.
 */
function vms_mlid_query_types() {
  return array(
    '***VMS_CURRENT***' => t('Currently active menu item'),
    '***VMS_TRAIL***' => t('Current trail of menu items'),
    '***VMS_EXCLUDE_CURRENT***' => t('Trail, excluding current page'),
  );
}

/**
 * Advertise the current views api version.
 */
function vms_views_api() {
  return array(
    'api' => '3',
    'path' => drupal_get_path('module', 'vms'),
  );
}

/**
 * Function for retrieving "fake" mlids from nodes. The fake mlids are set by
 * Rules to activate a chosen menu item when a node of a type is being viewed.
 *
 */
function _vms_get_current_fake_mlid() {

  $mlid = drupal_static('rb_misc_mlid');

  // Retrieve menu item specified in the settings.
  $menu_item = menu_link_load($mlid);

  // Clone the original router item, but insert our menu_position path.
  $original_router_item = menu_get_item();
  $router_item = $original_router_item;
  $router_item['href'] = $menu_item['link_path'];
  $router_item['menu_name'] = $menu_item['menu_name'];

  // Even if we are denied access to the page, we still want to show the
  // navigational paths to the page.
  $router_item['access'] = TRUE;

  $router_item_cid = 'links:' . $router_item['menu_name'] . ':page:' . $router_item['href'] . ':' . $GLOBALS['language']->language . ':' . (int) $router_item['access'] . ':' . (int) 0;
  $cache = cache_get($router_item_cid, 'cache_menu');
  $tree_cid = $cache->data;

  // Copy the cache to the tree that contains the original router item.
  $original_router_item_cid = 'links:' . $router_item['menu_name'] . ':page:' . $original_router_item['href'] . ':' . $GLOBALS['language']->language . ':' . (int) $original_router_item['access'] . ':' . 0;

  $active_trail = cache_get($original_router_item_cid, 'cache_menu')->data['active_trail'];

  return $active_trail;
}

/**
 * Helper function to get active menu item IDs in three different ways.
 *
 * @param <string> $trail
 *   Sets how the menu trail should be included (or not). The recognized values
 *   are the same as those defined by vms_mlid_query_type():
 *     * '***VMS_CURRENT***' returns the current mlid, period.
 *     * '***VMS_TRAIL***' returns the trail of mlids to the top of the menu
 *       tree, ending with the front page.
 *     * '***VMS_EXCLUDE_CURRENT***' works as the '***VMS_TRAIL***' option, but
 *       excludes the currently active mlid from the list.
 * @return <type>
 *   An array with the requested mlids.
 */
function vms_get_current_mlid($trail = '***VMS_CURRENT***') {
  // This function might be called a large number of times on a page request, so
  // it makes sense to have a static cache. (This does not have to be cached per
  // requested page, since it is built only once per page request.)
  static $response;
  if (isset($response[$trail])) {
    return $response[$trail];
  }

  // Front page is a special case, and doesn't have any mlid. This is handled
  // separately, to allow some smoother process below.
  if (drupal_is_front_page()) {
    if ($trail == '***VMS_EXCLUDE_CURRENT***') {
      $response[$trail] = array(VMS_MLID_MISSING);
      return $response[$trail];
    }
    else {
      $response[$trail] = array(VMS_FRONT_PAGE);
      return $response[$trail];
    }
  }


    // Get the current active menu link trail. Yes, the *set* function is also
  // used to get the active trail. It is called 'DX'.
  $menu_trail = menu_set_active_trail();

  // Note that this operation *removes* an item from the array it works with,
  // while also populating the new variable.
  $current_menu_item = array_pop(&$menu_trail);

  if (!isset($current_menu_item['mlid'])) {
    // If we don't have any active menu item, and we're NOT at the front page,
    // something is awry – we could for example be on a 404 page. Return -2 to
    // allow recognizing this special case.
    $response[$trail] = array(VMS_MLID_MISSING);
    return $response[$trail];
  }

  // Set a fake mlid for the top item in the trail, corresponding to the front
  // page.
  $menu_trail[0]['mlid'] = VMS_FRONT_PAGE;

  // Get the current active menu link trail. Yes, the *set* function is also
  // used to get the active trail. It is called 'DX'.
  // $menu_trail = menu_set_active_trail();

  // Note that this operation *removes* an item from the array it works with,
  // while also populating the new variable.
  // $current_menu_item = array_pop(&$menu_trail);

  // if (!isset($current_menu_item['mlid'])) {
    // If we don't have any active menu item, and we're NOT at the front page,
    // something is awry – we could for example be on a 404 page. Return -2 to
    // allow recognizing this special case.
  //  $response[$trail] = array(VMS_MLID_MISSING);
  //  return $response[$trail];
  // }

  // Set a fake mlid for the top item in the trail, corresponding to the front
  // page.
    $menu_trail[0]['mlid'] = VMS_FRONT_PAGE;

  // Check the different configuration cases, and return mlids accordingly.


  switch ($trail) {
    case '***VMS_CURRENT***' : {
      $response[$trail] = array($current_menu_item['mlid']);
      return $response[$trail];
    }

    case '***VMS_TRAIL***' : {
      $mlids = array();
      // If this is a node that has a fake mlid, use the fake mlid trail instead
      //  of the drupal standard mlid trail.
      if (drupal_static('rb_misc_mlid_trail')) {
        $mlids = drupal_static('rb_misc_mlid_trail');
        $mlids[] = VMS_FRONT_PAGE;
      }
      else {
        foreach ($menu_trail as $menu_item) {
          $mlids[] = $menu_item['mlid'];
        }
        $mlids[] = $current_menu_item['mlid'];
      }
      $response[$trail] = $mlids;
      return $response[$trail];
    }

    case '***VMS_EXCLUDE_CURRENT***' : {
      $mlids = array();
      if (drupal_static('rb_misc_mlid_trail')) {
        $mlids = drupal_static('rb_misc_mlid_trail');
        // The front page should be added to the array, unless we're actually at
        // the front page right now.
        if (!drupal_is_front_page()) {
          $mlids[] = VMS_FRONT_PAGE;
        }
      }
      else {
        foreach ($menu_trail as $menu_item) {
          $mlids[] = $menu_item['mlid'];
        }
      }
      $response[$trail] = $mlids;
      return $response[$trail];
    }
  }

  // If we got here, something is wrong. The $trail setting could for example
  // have an unrecognized value.
  $response[$trail] = array(VMS_BAD_CONFIG);

  return $response[$trail];
}

// TODO: WRITE A WIDGET THAT POPULATES INTEGER FIELDS WITH MLIDS.

///**
// * Implements hook_field_widget_info().
// */
//function vms_field_widget_info() {
//  return array(
//    'vms_select' => array(
//      'label' => t('Menu item reference'),
//      'field types' => array('number_integer', 'list_integer'),
//      'behaviors' => array(
//        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
//      ),
//    ),
//  );
//}
//
///**
// * Implements hook_field_widget_settings_form().
// */
//function vms_field_widget_settings_form($field, $instance) {
//  $form = array();
//  $default_value = (isset($instance['widget']['settings']['menus'])) ?
//    $instance['widget']['settings']['menus'] : array();
//  if ($instance['widget']['type'] == 'vms_select') {
//    $form['menus'] = array(
//      '#type' => 'checkboxes',
//      '#multiple' => TRUE,
//      '#required' => TRUE,
//      '#title' => t('Referencable menus'),
//      '#options' => menu_get_menus(),
//      '#default_value' => $default_value,
//      '#weight' => -1,
//    );
//  }
//  return $form;
//}
//
///**
// * Implements hook_field_widget_form().
// */
//function vms_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
//  // Abstract over the actual field columns, to allow different field types to
//  // reuse those widgets.
//  $value_key = 'value';
//
//  $multiple = $field['cardinality'] > 1 || $field['cardinality'] == FIELD_CARDINALITY_UNLIMITED;
//  $required = $element['#required'];
//
//  // Prepare the list of options.
//  $selectable_menu_items[-1] = t('<front>');
//  if (isset($instance['widget']['settings']['menus'])) {
//    foreach ($instance['widget']['settings']['menus'] as $key => $menu) {
//      if ($menu) {
//        $menu_items = menu_parent_options(array($key => $menu), array('mlid' => 0));
//        $menu_name = array_shift(&$menu_items);
//        foreach($menu_items as $menu_item => $title) {
//          $menu_info = explode(':', $menu_item);
//          $selectable_menu_items[$menu_info[0]][$menu_info[1]] = $title;
//        }
//      }
//    }
//  }
//
//  // Put current field values in shape.
//  $element += array(
//    '#type' => 'select',
//    '#default_value' => array(),
//    // Do not display a 'multiple' select box if there is only one option.
////    '#multiple' => $multiple && count($options) > 1,
//    '#multiple' => FALSE,
//    '#options' => $selectable_menu_items,
//    '#required' => $required,
//  );
//
//  $properties = array(
//    // Select boxes do not support any HTML tag.
//    'strip_tags' => TRUE,
//    'optgroups' => TRUE,
//    'empty_option' => FALSE,
//  );
//
//  $element += array(
//    '#element_validate' => array('vms_field_widget_validate'),
//    '#value_key' => $value_key,
//    '#properties' => $properties,
//  );
//
//  return $element;
//}
//
//function vms_field_widget_validate($element, &$form_state) {
//  if ($element['#required'] && $element['#value'] == '_none') {
//    form_error($element, t('!name field is required.', array('!name' => $element['#title'])));
//  }
//  // Transpose selections from field => delta to delta => field, turning
//  // multiple selected options into multiple parent elements.
//  $items = _options_form_to_storage($element);
//  form_set_value($element, $items, $form_state);
//}
